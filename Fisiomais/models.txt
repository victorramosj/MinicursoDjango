#python -m venv venv
#.\venv\Scripts\activate
#django-admin startproject meu_projeto
#python manage.py makemigrations
#python manage.py migrate

from django.db import models
from django.contrib.auth.models import AbstractBaseUser
from django.utils import timezone
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.utils.timezone import now

# Gerenciador de usuários personalizado
class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('O email é obrigatório')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_admin', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, password, **extra_fields)

# Modelo: Colaboradores (Baseado no modelo de usuário do Django)
class Colaborador(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    nome = models.CharField(max_length=255)
    telefone = models.CharField(max_length=20, unique=True, null=True, blank=True)
    senha = models.CharField(max_length=255)
    is_admin = models.BooleanField(default=False)
    referencias = models.TextField(null=True, blank=True)
    cargo = models.CharField(max_length=100)
    endereco = models.CharField(max_length=255, null=True, blank=True)
    cpf = models.CharField(max_length=11, unique=True)
    estado = models.CharField(max_length=50, null=True, blank=True)
    cidade = models.CharField(max_length=100, null=True, blank=True)
    bairro = models.CharField(max_length=100, null=True, blank=True)
    photo = models.ImageField(upload_to='colaboradores/photos/', null=True, blank=True)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['nome', 'cpf']

    def __str__(self):
        return self.nome

# Modelo: Horários
class Horario(models.Model):
    colaborador = models.ForeignKey(Colaborador, on_delete=models.CASCADE, related_name='horarios')
    dia_semana = models.CharField(max_length=50)
    hora_inicio = models.TimeField()
    hora_fim = models.TimeField()

    def __str__(self):
        return f'{self.dia_semana} - {self.hora_inicio} até {self.hora_fim}'

# Modelo: Clientes
class Cliente(models.Model):
    nome = models.CharField(max_length=255)
    telefone = models.CharField(max_length=20, unique=True, null=True, blank=True)
    email = models.EmailField(unique=True)
    senha = models.CharField(max_length=255)
    referencias = models.TextField(null=True, blank=True)
    dt_nasc = models.DateField(null=True, blank=True)
    endereco = models.CharField(max_length=255, null=True, blank=True)
    estado = models.CharField(max_length=50, null=True, blank=True)
    cidade = models.CharField(max_length=100, null=True, blank=True)
    bairro = models.CharField(max_length=100, null=True, blank=True)
    cpf = models.CharField(max_length=11, unique=True)
    photo = models.ImageField(upload_to='clientes/photos/', null=True, blank=True)

    def __str__(self):
        return self.nome

# Modelo: Serviços
class Servico(models.Model):
    Nome_servico = models.CharField(max_length=255)
    Descricao = models.TextField()
    Valor = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    tipo_servico = models.CharField(max_length=50)  # fisioterapia ou pilates
    planos = models.JSONField(null=True, blank=True)  # Usar JSONField do Django para armazenar planos

    def __str__(self):
        return self.Nome_servico

# Modelo: Relacionamento Colaboradores e Serviços
class ColaboradoresServicos(models.Model):
    colaborador = models.ForeignKey(Colaborador, on_delete=models.CASCADE, related_name='servicos_relacionados')
    servico = models.ForeignKey(Servico, on_delete=models.CASCADE, related_name='colaboradores_relacionados')

# Modelo: Agendamentos
class Agendamento(models.Model):
    data_e_hora = models.DateTimeField()
    cliente = models.ForeignKey(Cliente, on_delete=models.CASCADE, related_name='agendamentos')
    colaborador = models.ForeignKey(Colaborador, on_delete=models.CASCADE, related_name='agendamentos')
    servico = models.ForeignKey(Servico, on_delete=models.CASCADE, related_name='agendamentos')
    ID_Plano = models.IntegerField(null=True, blank=True)
    status = models.CharField(max_length=20, default='pendente')

    def __str__(self):
        return f'Agendamento {self.id} - {self.status}'

# Modelo: Tokens em Blacklist
class BlacklistedToken(models.Model):
    jti = models.CharField(max_length=255, unique=True)

    def __str__(self):
        return self.jti
